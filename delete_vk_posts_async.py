import asyncio
import aiohttp
import time

# =====================================
#            –ù–ê–°–¢–†–û–ô–ö–ò
# =====================================
ACCESS_TOKEN    = 'vk1.a.–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨'  # User access token —Å –ø—Ä–∞–≤–∞–º–∏ wall, groups
GROUP_ID        = -123456789               # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π ID –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
API_VERSION     = '5.131'                  # –í–µ—Ä—Å–∏—è VK API
BATCH_SIZE      = 100                      # –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –∑–∞ —Ä–∞–∑ –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å
MAX_CONCURRENT  = 3                        # –°–∫–æ–ª—å–∫–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö delete-–∑–∞–ø—Ä–æ—Å–æ–≤
DELAY           = 0.3                      # –ü–∞—É–∑–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
# =====================================

async def fetch_posts(session: aiohttp.ClientSession) -> list:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É VK –¥–æ BATCH_SIZE –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã.

    :param session: aiohttp.ClientSession –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
    :return: —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ (dict), –µ—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    :raises RuntimeError: –ø—Ä–∏ –æ—à–∏–±–∫–µ API (–∫–ª—é—á "error" –≤ –æ—Ç–≤–µ—Ç–µ)
    """
    params = {
        'access_token': ACCESS_TOKEN,
        'v':            API_VERSION,
        'owner_id':     GROUP_ID,
        'count':        BATCH_SIZE,
        'filter':       'owner'  # –¢–æ–ª—å–∫–æ –ø–æ—Å—Ç—ã, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
    }
    async with session.get('https://api.vk.com/method/wall.get', params=params) as resp:
        data = await resp.json()
        if 'error' in data:
            # –ï—Å–ª–∏ VK –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            raise RuntimeError(f"–û—à–∏–±–∫–∞ wall.get: {data['error']['error_msg']}")
        items = data['response']['items']
        print(f"üîç –û—Å—Ç–∞–ª–æ—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {len(items)}")
        return items

def make_delete_post(semaphore: asyncio.Semaphore):
    """
    –§–∞–±—Ä–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º—É.

    :param semaphore: asyncio.Semaphore –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∏—Å–ª–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    :return: coroutine-—Ñ—É–Ω–∫—Ü–∏—è delete_post(session, post_id)
    """
    async def delete_post(session: aiohttp.ClientSession, post_id: int) -> None:
        """
        –£–¥–∞–ª—è–µ—Ç –æ–¥–∏–Ω –ø–æ—Å—Ç –ø–æ –µ–≥–æ ID.

        :param session: aiohttp.ClientSession –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
        :param post_id: —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ—Å—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
        """
        async with semaphore:
            params = {
                'access_token': ACCESS_TOKEN,
                'v':            API_VERSION,
                'owner_id':     GROUP_ID,
                'post_id':      post_id
            }
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
            async with session.post('https://api.vk.com/method/wall.delete', params=params) as resp:
                result = await resp.json()
                if 'error' in result:
                    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
                    print(f"‚ùå –ü–æ—Å—Ç {post_id}: {result['error']['error_msg']}")
                else:
                    print(f"‚úÖ –£–¥–∞–ª—ë–Ω –ø–æ—Å—Ç {post_id}")
            # –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å rate limit
            await asyncio.sleep(DELAY)

    return delete_post

async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ—Ä—É—Ç–∏–Ω–∞:
    - –ó–∞–≤–æ–¥–∏—Ç —Ç–∞–π–º–µ—Ä.
    - –¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç—ã –ø–∞—á–∫–∞–º–∏.
    - –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â–µ–µ —á–∏—Å–ª–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
    """
    # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞
    start_time = time.perf_counter()
    total_deleted = 0

    # –°–æ–∑–¥–∞—ë–º Semaphore –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ event loop
    semaphore = asyncio.Semaphore(MAX_CONCURRENT)
    delete_post = make_delete_post(semaphore)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º HTTP-—Å–µ—Å—Å–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async with aiohttp.ClientSession() as session:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–∞—á–∫—É
            posts = await fetch_posts(session)
            if not posts:
                # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤ ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                break

            # –°—Ç–∞—Ä—Ç—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –ø–∞—á–∫–µ
            tasks = [asyncio.create_task(delete_post(session, p['id'])) for p in posts]
            # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –ø–∞—á–∫–µ
            await asyncio.gather(*tasks)

            total_deleted += len(posts)

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    elapsed = time.perf_counter() - start_time
    hrs, rem = divmod(elapsed, 3600)
    mins, secs = divmod(rem, 60)

    # –ò—Ç–æ–≥–æ–≤—ã–π –≤—ã–≤–æ–¥
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_deleted}")
    print(f"‚è± –ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏: {int(hrs):02}:{int(mins):02}:{secs:05.2f}")

if __name__ == '__main__':
    asyncio.run(main())
